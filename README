.Author
	Misa.Z misa@rokid.com

.License
	under GPL.

.About
	This TinyJS intepretor engine core was forked from https://github.com/gfwilliams/tiny-js.git, by Gordon Williams <gw@pur3.co.uk>.
	fixed some bugs and done lots of jobs on native interface framework design.

	Bytecode compiler and vm are all wrote by Misa.Z. The interpretor and bytecode runtime share the same native functions interface.	

.How to do arm cross compile on mac osx:
 
	download arm-toolchain for macosx from:
	https://github.com/downloads/UnhandledException/ARMx/ARMx-2009q3-67.tar.bz2

	tar -zx -C ./ --strip-components 1 -f ARMx-2009q3-67.tar.bz2 

	add the path which has 'arm-none-linux-gnueabi-g++' to default paths. 

	.to compile intel pc elf:
		make

	.to compile arm elf:
		make arm

----------------------------------------------------------------------------------------
TinyJS source code reading guide. by Misa.Z(misa.zhu@gmail.com)
----------------------------------------------------------------------------------------

Directories: 
	|
	+-	TinyJS : Interpreter.
	+-  demos : Demos for embedded TinyJS in your c++ project.
	+-	jsvm : Bytecode compiler and virtual machine.
	+-	libs : 3rd libs.
	+-	native : native class/functions extend.
	+-	test : test and demo scripts.

1.Bytecode design

TinysJS bytecode has been designed by very simple way, it has only two parts: "instruction set" and "string table". Instruction is 32 bits size with 16 bits high for instruction code (short as INSTR), and 16 bit low for short int (SINT) or offset of string table (SOFF).

string table:
						-----------------
						|index | string |
						-----------------
						| 0    | str0   |
						-----------------
						| 1    | str1	  |
						-----------------

Instruction:
						-------------------------
						| (16 bits) | (16 bits) |
						-------------------------
						| INSTR     | SINT/SOFF |
						-------------------------

	


